$date
	Thu Feb 27 13:08:53 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module testPriorityEncoder $end
$var wire 4 ! sum [3:0] $end
$var wire 1 " cout $end
$var reg 4 # a [3:0] $end
$var reg 4 $ b [3:0] $end
$var reg 1 % cin $end
$var reg 1 & clk $end
$var reg 8 ' o [7:0] $end
$var reg 1 ( rst $end
$scope module dut $end
$var wire 4 ) a [3:0] $end
$var wire 4 * b [3:0] $end
$var wire 1 % cin $end
$var wire 4 + sum [3:0] $end
$var wire 1 " cout $end
$var wire 1 , c3 $end
$var wire 1 - c2 $end
$var wire 1 . c1 $end
$scope module fa1 $end
$var wire 1 % cin $end
$var wire 1 . cout $end
$var wire 1 / x $end
$var wire 1 0 y $end
$var wire 1 1 sum $end
$var wire 1 2 s1 $end
$var wire 1 3 c2 $end
$var wire 1 4 c1 $end
$scope module h1 $end
$var wire 1 4 cout $end
$var wire 1 2 sum $end
$var wire 1 / x $end
$var wire 1 0 y $end
$upscope $end
$scope module h2 $end
$var wire 1 3 cout $end
$var wire 1 1 sum $end
$var wire 1 2 x $end
$var wire 1 % y $end
$upscope $end
$upscope $end
$scope module fa2 $end
$var wire 1 . cin $end
$var wire 1 - cout $end
$var wire 1 5 x $end
$var wire 1 6 y $end
$var wire 1 7 sum $end
$var wire 1 8 s1 $end
$var wire 1 9 c2 $end
$var wire 1 : c1 $end
$scope module h1 $end
$var wire 1 : cout $end
$var wire 1 8 sum $end
$var wire 1 5 x $end
$var wire 1 6 y $end
$upscope $end
$scope module h2 $end
$var wire 1 9 cout $end
$var wire 1 7 sum $end
$var wire 1 8 x $end
$var wire 1 . y $end
$upscope $end
$upscope $end
$scope module fa3 $end
$var wire 1 - cin $end
$var wire 1 , cout $end
$var wire 1 ; x $end
$var wire 1 < y $end
$var wire 1 = sum $end
$var wire 1 > s1 $end
$var wire 1 ? c2 $end
$var wire 1 @ c1 $end
$scope module h1 $end
$var wire 1 @ cout $end
$var wire 1 > sum $end
$var wire 1 ; x $end
$var wire 1 < y $end
$upscope $end
$scope module h2 $end
$var wire 1 ? cout $end
$var wire 1 = sum $end
$var wire 1 > x $end
$var wire 1 - y $end
$upscope $end
$upscope $end
$scope module fa4 $end
$var wire 1 , cin $end
$var wire 1 " cout $end
$var wire 1 A x $end
$var wire 1 B y $end
$var wire 1 C sum $end
$var wire 1 D s1 $end
$var wire 1 E c2 $end
$var wire 1 F c1 $end
$scope module h1 $end
$var wire 1 F cout $end
$var wire 1 D sum $end
$var wire 1 A x $end
$var wire 1 B y $end
$upscope $end
$scope module h2 $end
$var wire 1 E cout $end
$var wire 1 C sum $end
$var wire 1 D x $end
$var wire 1 , y $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
xF
xE
xD
xC
xB
xA
x@
x?
x>
x=
x<
x;
x:
x9
x8
x7
x6
x5
x4
x3
x2
x1
x0
x/
x.
x-
x,
bx +
bx *
bx )
1(
bx '
0&
x%
bx $
bx #
x"
bx !
$end
#10
b0 '
1&
#20
0&
0(
#30
b1 '
0C
0,
17
0?
1=
1.
13
b110 !
b110 +
01
0-
09
0"
0E
04
12
0:
08
0@
1>
0F
0D
10
06
0<
0B
0/
05
1;
0A
1%
b1 $
b1 *
b100 #
b100 )
1&
#40
0&
#50
b10 '
1"
1E
1,
1?
0=
1-
0C
03
11
19
b1 !
b1 +
07
1D
14
02
18
1<
1B
1/
15
0;
b1101 $
b1101 *
b11 #
b11 )
1&
#60
0&
#70
b11 '
0"
13
01
0E
b1000 !
b1000 +
1C
04
12
0D
00
16
0<
0B
05
1;
b10 $
b10 *
b101 #
b101 )
1&
#80
0&
#90
b100 '
1"
0?
1=
1E
b100 !
b100 +
0C
1@
0>
1D
1<
1A
b110 $
b110 *
b1101 #
b1101 )
1&
#100
0&
#110
b101 '
0=
0-
09
17
0E
b1010 !
b1010 +
1C
08
1F
0D
06
1B
b1100 $
b1100 *
1&
#120
0&
#130
b110 '
0"
0.
18
0F
03
b1011 !
b1011 +
11
10
0B
0/
15
0A
0%
b101 $
b101 *
b110 #
b110 )
1&
#140
0&
